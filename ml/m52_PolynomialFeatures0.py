"""
[핵심]
PolynomialFeatures  : 단항식을 다항식으로 증폭시켜준다.

(원래 형태)
# # print(x)
# # [[0 1]
# #  [2 3]
# #  [4 5]
# #  [6 7]]

# # print(x.shape)   # (4, 2)

(사용법)
from sklearn.preprocessing import PolynomialFeatures
# pf = PolynomialFeatures(degree=2)  

# x_pf = pf.fit_transform(x)

# print(x_pf)
# # [[ 1.  0.  1.  0.  0.  1.]
# #  [ 1.  2.  3.  4.  6.  9.]  
# #  [ 1.  4.  5. 16. 20. 25.]
# #  [ 1.  6.  7. 36. 42. 49.]]
# print(x_pf.shape)   # (4, 6)


(증폭할 때 특징)
 - 증폭할 때 앞에 1은 무조건 채워준다.
 - 증폭할 때 PolynomialFeatures(degree=2)부분에  degree는 통상 2까지 넣는다. 
   3이상부터는 과접합으로 인해 성능이 저하될 가능성이 높기 때문에 잘 안넣어서 사용한다.
   
   
(증폭 연산 방법)
[ 1.  2.  3.  4.  6.  9.]    # 1채우고 / 원래 데이터 2 / 원래데이터 3 / 2^2 / 3*2 / 3^2
"""


import numpy as np
import pandas as pd
from sklearn.preprocessing import PolynomialFeatures

# x = np.arange(8).reshape(4, 2)
# # print(x)
# # [[0 1]
# #  [2 3]
# #  [4 5]
# #  [6 7]]

# # print(x.shape)   # (4, 2)

# pf = PolynomialFeatures(degree=2)    # 증폭 개념   /  단항을 다항으로 증폭시킨다.    /  통상 2까지 넣는다.  3이상은 성능저하 때문에 안넣는다. 
# """
# 앞에 1은 무조건 채워준다.

# """

# x_pf = pf.fit_transform(x)

# print(x_pf)
# # [[ 1.  0.  1.  0.  0.  1.]
# #  [ 1.  2.  3.  4.  6.  9.]  1채우고 / 원래 데이터 2 / 원래데이터 3 / 2^2 / 3*2 / 3^2
# #  [ 1.  4.  5. 16. 20. 25.]
# #  [ 1.  6.  7. 36. 42. 49.]]
# print(x_pf.shape)   # (4, 6)

##################################################################################################
# x = np.arange(12).reshape(4, 3)
# # print(x)
# # [[ 0  1  2]
# #  [ 3  4  5]
# #  [ 6  7  8]
# #  [ 9 10 11]]

# # print(x.shape)   # (4, 2)

# pf = PolynomialFeatures(degree=2)    # 증폭 개념   /  단항을 다항으로 증폭시킨다.    /  통상 2까지 넣는다.  3이상은 성능저하 때문에 안넣는다. 
# """
# 앞에 1은 무조건 채워준다.

# """

# x_pf = pf.fit_transform(x)

# print(x_pf)
# # [[  1.   0.   1.   2.   0.   0.   0.   1.   2.   4.]    1 / 0
# #  [  1.   3.   4.   5.   9.  12.  15.  16.  20.  25.]
# #  [  1.   6.   7.   8.  36.  42.  48.  49.  56.  64.]
# #  [  1.   9.  10.  11.  81.  90.  99. 100. 110. 121.]]
# print(x_pf.shape)   # (4, 10)

####################################################################################################################

# x = np.arange(8).reshape(4, 2)
# # print(x)
# # [[0 1]
# #  [2 3]
# #  [4 5]
# #  [6 7]]

# # print(x.shape)   # (4, 2)

# pf = PolynomialFeatures(degree=3)    # 증폭 개념   /  단항을 다항으로 증폭시킨다.    /  통상 2까지 넣는다.  3이상은 성능저하 때문에 안넣는다. 
# """
# 앞에 1은 무조건 채워준다.

# """

# x_pf = pf.fit_transform(x)

# # print(x_pf)
# # # [[  1.   0.   1.   0.   0.   1.   0.   0.   0.   1.]
# # #  [  1.   2.   3.   4.   6.   9.   8.  12.  18.  27.]
# # #  [  1.   4.   5.  16.  20.  25.  64.  80. 100. 125.]
# # #  [  1.   6.   7.  36.  42.  49. 216. 252. 294. 343.]]
# # print(x_pf.shape)   # (4, 10)








