"""
[핵심]
BayesianOptimization : 자동으로 최적의 파라미터를 찾아준다.   / 이게 상당히 잘맞춰서 상당히 좋다! 자세히 알고싶으면 통계수학으로 봐봐 ㅋ ;;
                                                                이거 선생님이랑 실무자도 제대로 설명 못한다고함  ㅋㅋ 그냥 쓰자 ㅋㅋㅋ

함수와 파라미터를

함수안에 딕셔너리 형태로 넣어주고 파라미터를 사용하면 된다 


[파라미터 생성]
param_bounds = {"x1" : (-1, 5),
                "x2" : (0, 4)}

def y_function(x1, x2):
    return -x1 **2 - (x2 - 2) **2 + 10    # **은 제곱

from bayes_opt import BayesianOptimization    # pip install bayesian_optimization

optimizer = BayesianOptimization(f=y_function,           # f라는 함수에는 우리가 찾고자하는 파라미터를 넣는다.
                                 pbounds=param_bounds,   # 그 함수에 들어갈 파라미터를 딕셔너리 형태로 넣는다.
                                 random_state=1234
                                 )

이걸하면 아래의 결과가 출력된다.
optimizer.maximize(init_points=2,   # maximize: 최대치를 찾아준다.   / init_points : 초기치 설정
                   n_iter=20        # 나는 20번 돌릴 것이다.
                   )  

(출력결과)
# |   iter    |  target   |    x1     |    x2     |
# -------------------------------------------------
# |  1        |  9.739    |  0.1491   |  2.488    |
# |  2        |  6.052    |  1.626    |  3.141    |
# |  3        |  6.528    |  1.775    |  1.435    |
# |  4        |  9.741    |  0.1599   |  2.483    |
# |  5        |  9.445    | -0.4807   |  1.431    |
# |  6        |  5.0      | -1.0      |  0.0      |
# |  7        |  5.0      | -1.0      |  4.0      |
# |  8        |  8.979    | -1.0      |  2.144    |
# |  9        | -19.0     |  5.0      |  0.0      |
# |  10       | -19.0     |  5.0      |  4.0      |
# |  11       |  5.355    |  0.8034   |  0.0      |
# |  12       |  9.63     |  0.5211   |  1.686    |
# |  13       |  9.98     | -0.1395   |  1.992    |
# |  14       |  9.923    |  0.2629   |  2.086    |
# |  15       |  9.966    |  0.02993  |  1.817    |
# |  16       |  9.996    |  0.01324  |  2.062    |
# |  17       |  10.0     |  0.01454  |  1.991    |
# |  18       |  10.0     |  0.007833 |  1.99     |
# |  19       |  10.0     |  0.002898 |  1.987    |
# |  20       |  9.996    | -0.01311  |  2.064    |
# |  21       |  9.998    | -0.02176  |  1.963    |
# |  22       |  9.999    |  0.01782  |  1.985    |
# =================================================


# 이 부분을 보면 최대값이 x1이 0일때 x2가 2일때 가장 좋다라고 추측할 수 있다.
# |  17       |  10.0     |  0.01454  |  1.991    |
# |  18       |  10.0     |  0.007833 |  1.99   


(이것을 찍어봐도 알 수 있다.)
# print(optimizer.max)    # max : 최대값이 나오는 값을 뽑아준다 optimizer라는 변수는 파라미터 관련 변수를 위에서 설정했으므로 
                                  최대값이 나오는 파라미터를 뽑아준다.
# {'target': 9.999835918969607, 'params': {'x1': 0.00783279093916099, 'x2': 1.9898644972252864}}

위에와 동일한 결과를 볼 수 있다.

"""


param_bounds = {"x1" : (-1, 5),
                "x2" : (0, 4)}

def y_function(x1, x2):
    return -x1 **2 - (x2 - 2) **2 + 10    # **은 제곱

# y = -x1^2 - (x2 -2)^2 + 10
#      x1: -1 ~ 5   /  x2: 0 ~ 4

from bayes_opt import BayesianOptimization    # pip install bayesian_optimization

optimizer = BayesianOptimization(f=y_function,           # f라는 함수에는 우리가 찾고자하는 파라미터를 넣는다.
                                 pbounds=param_bounds,   # 그 함수에 들어갈 파라미터를 딕셔너리 형태로 넣는다.
                                 random_state=1234
                                 )

optimizer.maximize(init_points=2,   # maximize: 최대치를 찾아준다.   / init_points : 초기치 설정
                   n_iter=20        # 나는 20번 돌릴 것이다.
                   )  

# |   iter    |  target   |    x1     |    x2     |
# -------------------------------------------------
# |  1        |  9.739    |  0.1491   |  2.488    |
# |  2        |  6.052    |  1.626    |  3.141    |
# |  3        |  6.528    |  1.775    |  1.435    |
# |  4        |  9.741    |  0.1599   |  2.483    |
# |  5        |  9.445    | -0.4807   |  1.431    |
# |  6        |  5.0      | -1.0      |  0.0      |
# |  7        |  5.0      | -1.0      |  4.0      |
# |  8        |  8.979    | -1.0      |  2.144    |
# |  9        | -19.0     |  5.0      |  0.0      |
# |  10       | -19.0     |  5.0      |  4.0      |
# |  11       |  5.355    |  0.8034   |  0.0      |
# |  12       |  9.63     |  0.5211   |  1.686    |
# |  13       |  9.98     | -0.1395   |  1.992    |
# |  14       |  9.923    |  0.2629   |  2.086    |
# |  15       |  9.966    |  0.02993  |  1.817    |
# |  16       |  9.996    |  0.01324  |  2.062    |
# |  17       |  10.0     |  0.01454  |  1.991    |
# |  18       |  10.0     |  0.007833 |  1.99     |
# |  19       |  10.0     |  0.002898 |  1.987    |
# |  20       |  9.996    | -0.01311  |  2.064    |
# |  21       |  9.998    | -0.02176  |  1.963    |
# |  22       |  9.999    |  0.01782  |  1.985    |
# =================================================

# 이 부분을 보면 최대값이 x1이 0일때 x2가 2일때 가장 좋다라고 추측할 수 있다.
# |  17       |  10.0     |  0.01454  |  1.991    |
# |  18       |  10.0     |  0.007833 |  1.99   



# print(optimizer.max)
# {'target': 9.999835918969607, 'params': {'x1': 0.00783279093916099, 'x2': 1.9898644972252864}}