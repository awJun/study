
===[ np.argmax 설명 ]==================================================================================================



# 근데 우리는 평가 단계에서 x_test와 y_test를 가지고 평가 (model.evaluate)를 해줘야 하는데
# 이 두개를 비교하면 비교가 되지 않음. 왜?
# acc 스코어는 딱 떨어지는 정수값을 비교 시켜야 하니까. 왜?
# acc 스코어는 두개를 비교해서 얼마나 잘 맞췄는지를 보여주는 '평가지표'라서.

# 그래서 여기서 numpy 배열에서 가장 높은 값을 가진 값의 인덱스(위치)를 반환해주는 함수인 
# np.argmax 가 필요함 (여기서 np에는 다른 변수값을 넣어도 상관없다고 썜이 그러심) 
# np.argmax 라는 것을 하게 되면 그 위치의 최고값을 숫자로 바꿔줌 그래서 y_test = np.argmax(y_test, axis=1)를 해보면
# [1 1 1 0 1 1 0 0 0 2 2 2 0 2 2 0 1 1 2 2 0 1 1 2 1 2 0 0 2 2] <-- 이렇게 위치 값이 나옴
                                              axis=1은 열을 따라 열을 기준으로 최대값을 뽑아준다는 뜻이다.

ex)[[0. 0. 1.]     # [0. 0. 1.] --> 1
    [0. 0. 3.]     # [0. 0. 2.] --> 2
    [0. 0. 1.]     # [0. 0. 1.] --> 1
    [0. 0. 0.]     # [0. 0. 0.] --> 0
    [0. 2. 0.]]    # [0. 2. 0.] --> 2
                                --> [1, 2, 1, 0, 2]

위 과정을 거치면 x_test와 y_test의 데이터 형식이 딱 맞아 떨어지므로 평가지표를 사용할 수 있다.

---[ 해당 데이터에서 np.argmax 사용 ]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

 - np.argmax 사용전
 
 print(y_predict)                           [np.argmax 변환 과정]
[[0.08959465 0.40775216 0.5026532 ]         # 3 번째가 크므로 인덱스 번호 2를 값으로 출력 
 [0.6018631  0.20704316 0.1910938 ]         # 1 번째가 크므로 인덱스 번호 0를 값으로 출력 
 [0.05926589 0.42458445 0.5161497 ]         # 3 번째가 크므로 인덱스 번호 2를 값으로 출력 
 [0.7170514  0.1463862  0.13656245]         # 1 번째가 크므로 인덱스 번호 0를 값으로 출력 
 [0.12393255 0.41218412 0.46388337]         # 3 번째가 크므로 인덱스 번호 2를 값으로 출력 
 [0.08613694 0.420794   0.49306896]         # 3 번째가 크므로 인덱스 번호 2를 값으로 출력 
 [0.67692095 0.16824727 0.1548318 ]         # 1 번째가 크므로 인덱스 번호 0를 값으로 출력 
 [0.6098877  0.2085307  0.18158153]         # 1 번째가 크므로 인덱스 번호 0를 값으로 출력 
 [0.09759078 0.41284874 0.48956054]    
 [0.60590327 0.20843604 0.18566066]  
 [0.66474    0.17617877 0.15908115]   
 [0.10766347 0.39219874 0.50013775]   
 [0.61376274 0.20040715 0.18583015]    
 [0.65335655 0.18506946 0.16157399]  
 [0.11661515 0.40082452 0.48256028]   
 [0.18119797 0.40600768 0.41279435]    
 [0.18567011 0.4207091  0.39362076]    
 [0.13218799 0.41507173 0.4527403 ]   
 [0.06576469 0.43045685 0.5037784 ]   
 [0.1014626  0.40981135 0.48872608]   
 [0.08630467 0.42224053 0.49145478]   
 [0.64735985 0.18673591 0.16590428]  
 [0.11526372 0.41435182 0.47038448]    
 [0.5836079  0.21743628 0.19895582]    
 [0.18963948 0.40684822 0.40351236]   
 [0.10951906 0.40046728 0.49001375]    
 [0.18905994 0.40474746 0.40619257]   
 [0.6187705  0.20348929 0.17774022]    
 [0.14006315 0.4194939  0.44044286]    
 [0.09492716 0.40226743 0.5028055 ]]    


- np.argmax 사용후

y_predict = np.argmax(y_predict, axis=1)

print(y_predict)
[2 0 2 0 2 2 0 0 2 0 0 2 0 0 2 2 1 2 2 2 2 0 2 0 1 2 2 0 2 2]

---[ y_test도 평가지표에서 사용 가능하도록 np.argmax 과정을 거쳐야함 ]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

TMI!!  : 평가지표에서 사용할 수 있는 데이터는 [0. 0. 1.]형태가 아닌 무조건 [2 0 2 0 2 2 0 0]와 같은 형태로 되어야 하므로
                                     [1. 0. 0.]               y_test의 데이터의 형태를 변환해야한다.
                                     [0. 0. 1.] 

y_test의 np.argmax 사용전 
                                     
[[0. 0. 1.]                          
 [1. 0. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 0. 1.]
 [0. 0. 1.]
 [1. 0. 0.]
 [1. 0. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [1. 0. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [1. 0. 0.]
 [0. 0. 1.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [0. 1. 0.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]

--[ y_test의 np.argmax 사용후 ]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

y_test = np.argmax(y_test, axis=1)

print(y_test)
[2 0 2 0 2 2 0 0 2 0 0 2 0 0 2 1 1 1 2 2 2 0 2 0 1 2 1 0 1 2]


--[ 최종 y_test와 y_predict의 데이터 ]- - - - - - - - - - - - - -

print(y_predict)
[2 0 2 0 2 2 0 0 2 0 0 2 0 0 2 2 1 2 2 2 2 0 2 0 1 2 2 0 2 2]
print(y_test)
[2 0 2 0 2 2 0 0 2 0 0 2 0 0 2 1 1 1 2 2 2 0 2 0 1 2 1 0 1 2]

이 형태만 평가지표에서 사용가능하다.