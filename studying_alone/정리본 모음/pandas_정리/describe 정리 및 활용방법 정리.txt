# https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf 판다스 시트자료
# https://pandas.pydata.org/docs/user_guide/10min.html 판다스 10분 종 합문서


# [해당 컬럼의 고유값을 알려준다.]


import pandas as pd
import seaborn as sns  # 보통 시각화를 할때 사용하는 데이터셋 seaborn을 불러옴

df = sns.load_dataset('iris')   # seaborn을 이용해서 iris데이터를 가져옴



#--[  수치형 데이터들에 대한 통계형 데이터를 출력하는 방법 ]- - - - - - - - - - - - - - - - - - - - -
# print(df.describe())  # 수치형 데이터들에 대한 통계형 데이터를 출력해준다.  / 그러므로 object(문자)형 데이터는 제외됨
#        sepal_length  sepal_width  petal_length  petal_width
# count    150.000000   150.000000    150.000000   150.000000
# mean       5.843333     3.057333      3.758000     1.199333
# std        0.828066     0.435866      1.765298     0.762238
# min        4.300000     2.000000      1.000000     0.100000
# 25%        5.100000     2.800000      1.600000     0.300000
# 50%        5.800000     3.000000      4.350000     1.300000
# 75%        6.400000     3.300000      5.100000     1.800000
# max        7.900000     4.400000      6.900000     2.500000





#--[  수치와 데이터종류에 상관없이 모두 다 출력하는 방법 ]- - - - - - - - - - - - - - - - - - - - -
# print(df.describe(include='all'))        # 수치와 데이터종류에 상관없이 모두 다 출력해준다.
#         sepal_length  sepal_width  petal_length  petal_width species
# count     150.000000   150.000000    150.000000   150.000000     150
# unique           NaN          NaN           NaN          NaN       3
# top              NaN          NaN           NaN          NaN  setosa
# freq             NaN          NaN           NaN          NaN      50
# mean        5.843333     3.057333      3.758000     1.199333     NaN
# std         0.828066     0.435866      1.765298     0.762238     NaN
# min         4.300000     2.000000      1.000000     0.100000     NaN
# 25%         5.100000     2.800000      1.600000     0.300000     NaN
# 50%         5.800000     3.000000      4.350000     1.300000     NaN
# 75%         6.400000     3.300000      5.100000     1.800000     NaN
# max         7.900000     4.400000      6.900000     2.500000     NaN



#--[ 문자형 데이터만 출력하는 방법 ]- - - - - - - - - - - - - - - - - - - - -
# import numpy as np
# print(df.describe(include=[np.object]))   # 문자형 데이터만 출력하는 방법
#        species
# count      150
# unique       3
# top     setosa
# freq        50


#--[ 숫자형 데이터만 출력하는 방법 ]- - - - - - - - - - - - - - - - - - - - -
# import numpy as np
# print(df.describe(include=[np.number])) 
#        sepal_length  sepal_width  petal_length  petal_width
# count    150.000000   150.000000    150.000000   150.000000
# mean       5.843333     3.057333      3.758000     1.199333
# std        0.828066     0.435866      1.765298     0.762238
# min        4.300000     2.000000      1.000000     0.100000
# 25%        5.100000     2.800000      1.600000     0.300000
# 50%        5.800000     3.000000      4.350000     1.300000
# 75%        6.400000     3.300000      5.100000     1.800000
# max        7.900000     4.400000      6.900000     2.500000


#--[ 사용가능 한 것 긁어옴]- - - - - - - - - - - - - - - - - - - - - -
# sum()
# Sum values of each object.
# count()
# Count non-NA/null values of
# each object.
# median()
# Median value of each object.
# quantile([0.25,0.75])
# Quantiles of each object.
# apply(function)
# Apply function to each object.
# min()
# Minimum value in each object.
# max()
# Maximum value in each object.
# mean()
# Mean value of each object.
# var()
# Variance of each object.
# std()
# Standard de


# ==[ 긁어온 것 사용 예시]===================================================
# print(df['petal_width'].sum())   # 179.90000000000003   /  해당 컬럼안의 전체 값의 합계값 출력해줌

# print(df['petal_width'].count())   # 150   /  해당 컬럼안의 전체 데이터의 갯수를 출력해줌

# print(df['petal_width'].median())    # 1.3   /  해당 컬럼안의 전체데이터의 중간값을 연산해서 알려준다.
   #TMI : 평균값과 중간값은 다른 것임.
# print(df['petal_width'].mean())      # 1.199333333333334  /   해당 컬럼안의 전체데이터의 평균값을 연산해서 알려준다.

# print(df.quantile([0.25, 0.75]))   #  전체 데이터중 0.25(25%), 0.75(75%)에 있는 데이터를 출력함
#    sepal_length  sepal_width  petal_length  petal_width
# 0.25           5.1          2.8           1.6          0.3
# 0.75           6.4          3.3           5.1          1.8

# print(df['petal_width'].quantile([0.25, 0.75]))  # 해당 컬럼안의 데이터중 0.25(25%), 0.75(75%)에 있는 데이터를 출력함
# 0.25    0.3
# 0.75    1.8
# Name: petal_width, dtype: float64

# print(df.min())       # 전체 데이터의 최소값을 출력해준다.
# sepal_length       4.3
# sepal_width        2.0
# petal_length       1.0
# petal_width        0.1
# species         setosa
# dtype: object

# print(df.max())        # 전체 데이터의 최대값을 출력해준다.
# sepal_length          7.9
# sepal_width           4.4
# petal_length          6.9
# petal_width           2.5
# species         virginica
# dtype: objec

# print(df.var())      # 전체 데이터의 분산값을 출력해준다.
# sepal_length    0.685694
# sepal_width     0.189979
# petal_length    3.116278
# petal_width     0.581006
# dtype: float64


# print(df.std())        # 전체 데이터의 표준편차값을 출력해준다.
# sepal_length    0.828066
# sepal_width     0.435866
# petal_length    1.765298
# petal_width     0.762238
# dtype: float64     














