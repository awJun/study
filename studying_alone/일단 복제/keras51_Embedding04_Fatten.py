from pickletools import optimize
from keras.preprocessing.text import Tokenizer
import numpy as np

#1. 데이터
docs = ['너무 재밋어요', '참 최고예요', '참 잘 만든 영화예요',
        '추천하고 싶은 영화입니다.', '한 번 더 보고 싶네요', '글쎄요',
        '별로예요', '생각보다 지루해요', '연기가 어색해요',
        '재미없어요', '너무 재미없다', '참 재밋네요', '민수가 못생기긴 했어요',
        '안결 혼해요'
        ]

# 긍정 1, 부정 0
labels = np.array([1,1,1,1,1,0,0,0,0,0,0,1,1,0])     # (14, )  y
token = Tokenizer()
token.fit_on_texts(docs)
# print(token.word_index)
# {'참': 1, '너무': 2, '재밋어요': 3, '최고예요': 4, '잘': 5, '만든': 6, '영화예요': 7, '추천하고': 8, '싶은': 9, 
# '영화입니다': 10, '한': 11, '번': 12, '더': 13, '보고': 14, '싶네요': 15, '글쎄요': 16, '별로예요': 17, 
# '생각보다': 18, '지루해요': 19, '연기가': 20, '어색해요': 21, '재미없어요': 22, '재미없다': 23, '재밋네요': 24, 
# '민수가': 25, '못생기긴': 26, '했어요': 27, '안결': 28, '혼해요': 29}


#===[docs을 수치화하는 작업]=============================================================================================================================
x = token.texts_to_sequences(docs)
print(x)
# [[2, 3], [1, 4], [1, 5, 6, 7], [8, 9, 10], [11, 12, 13, 14, 15], [16], [17], [18, 19], [20, 21], [22], [2, 23], [1, 24], [25, 26, 27], [28, 29]]
#=======================================================================================================================================================
#   -해당 데이터는 행, 열 구조가 각각이라 훈련시키기 못하는 상태이다.
#   - 그러므로 제일큰 행열의 규격에 맞춰서 작은 것들은 0으로 채워서 형태를 통일시키는 작업을 해줘야한다.

# LSTM특성상 뒤에 데이터가 더 중요하게 생각하므로 0은 앞에다가 채워주는게 좋다!
from keras.preprocessing.sequence import pad_sequences  # <-- 패딩하면 빈 곤간에 0을 채우저ㅜㅁ 
pad_x = pad_sequences(x, padding='pre', maxlen=5)     # padding='pre' 앞에서부터 채우라는 명령  /  maxlen=5 최대글자는 5자로 한정하겟다
# print(pad_x)
# [[ 0  0  0  2  3]
#  [ 0  0  0  1  4]
#  [ 0  1  5  6  7]
#  [ 0  0  8  9 10]
#  [11 12 13 14 15]
#  [ 0  0  0  0 16]
#  [ 0  0  0  0 17]
#  [ 0  0  0 18 19]
#  [ 0  0  0 20 21]
#  [ 0  0  0  0 22]
#  [ 0  0  0  2 23]
#  [ 0  0  0  1 24]
#  [ 0  0 25 26 27]
#  [ 0  0  0 28 29]]
print(pad_x)
print(pad_x.shape) # (14, 5)(14, 5)

word_size = len(token.word_index) # 길이를 알아볼려고 쓰는 용도
print("word_size : ", word_size)  # 단어사전의 갯수 : 29

print(np.unique(pad_x, return_counts=True))   # padding을 해줄때 0번째 자리고 채워줘서 30개가 되었다 / 즉 1부터 시작했는데 0을 만들어서 채워줫으므로 1개가 늘어남!
# (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]),
#  array([38,  3,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1], 
# 0의 갯수는 38개 1의 갯수는 3개 ...


# 원핫대신 임배딩을해서 사용한다
#2. 모델구성
from tensorflow.python.keras.models import Sequential   
from tensorflow.python.keras.layers import Dense, LSTM, Embedding, Flatten
model = Sequential()      # 인풋은 (14, 5)
#========================================================================================================================================================================
                    #         v-- 단어 사전의 갯수
# model.add(Embedding(input_dim=31, output_dim=10, input_length=5))  # <-- 통상 3차원 아웃풋이 나온다 LSTM
# model.add(Embedding(input_dim=31, output_dim=10))  # <-- 통상 3차원 아웃풋이 나온다 LSTM
# model.add(Embedding(31, 10)) #단어 사전의 수는 31개, 아웃풋은 10개다
# model.add(Embedding(31, 10, 5))   # error 마지막5는 자주사용 안하기 때문에 자동완성이 안됨 고로 정확한 파라미터를 넣어줘야함
#========================================================================================================================================================================
model.add(Embedding(40, 10, input_length=5))   # 마지막5는 자주사용 안하기 때문에 자동완성이 안됨 고로 정확한 파라미터를 넣어준 상태  / 형태를 맞춰주자 돌아는가지만 잔소리나옴 
# model.add(LSTM(32))
model.add(Flatten())   # Flatten를 사용하려면 input_length=5를 무조건 넣어줘야함
model.add(Dense(1, activation='sigmoid'))  # 0과 1을 구분하므로 sigmoid 사용
model.summary()


#3. 컴파일, 훈련
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])
model.fit(pad_x, labels, epochs=5, batch_size=16)


#4. 평가, 예측
acc = model.evaluate(pad_x, labels)[1]
print('acc :', acc )






