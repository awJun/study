# mlp(다층 퍼셉트론):  "m: 멀티   l: 레이어   p: 퍼셉트론"
"""
output이 2개
"""

"""=[ x.T 사용법 ]=================================================================================================================================

 - 원래 데이터
[[ 1.   2.   3.   4.   5.   6.   7.   8.   9.  10. ]
 [ 1.   1.   1.   1.   2.   1.3  1.4  1.5  1.6  1.4]]

 -  x = x.T 이후
 [[ 1.   1. ]
 [ 2.   1. ]
 [ 3.   1. ]
 [ 4.   1. ]
 [ 5.   2. ]
 [ 6.   1.3]
 [ 7.   1.4]
 [ 8.   1.5]
 [ 9.   1.6]
 [10.   1.4]]

-[ reshape(10,2) 사용법 ]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 - 원래 데이터
[[ 1.   2.   3.   4.   5.   6.   7.   8.   9.  10. ]
 [ 1.   1.   1.   1.   2.   1.3  1.4  1.5  1.6  1.4]]

 -  x = reshape(10,2) 이후
[[ 1.   2. ]
 [ 3.   4. ]
 [ 5.   6. ]
 [ 7.   8. ]
 [ 9.  10. ]
 [ 1.   1. ]
 [ 1.   1. ]
 [ 2.   1.3]
 [ 1.4  1.5]
 [ 1.6  1.4]]


===[ 데이터의 유형 ]==================================================================================================================

# 선형대수에서 다루는 데이터는 개수나 형태에 따라 크게 스칼라(scalar), 벡터(vector), 행렬(matrix), 텐서(tensor) 유형으로 나뉜다
# 스칼라(0차원): 숫자 하나로 이루어진 데이터 x =[1,2,3]에서 1,2,3 하나를 말함 스칼라 3개 
# 벡터(1차원): 스칼라의 모임 x =[1,2,3] 벡터1개 shape=(3,) 
# 행렬(matrix,2차원):벡터,즉 데이터 레코드가 여러인 데이터 집합 ([1,2,3],[4,3,2]) shape =(2,3)
# 텐서(3차원):같은 크기의 행렬이 여러 개 있는 것([[1,2,3],[4,3,2]] , [[4,3,11],[3,7,16]]) shape =(2,2,3) 가장 작은것부터 읽는다 (행,렬)
# tensorflow = 텐서를 연산시키다 피쳐의 숫자는 동일하다.

#  1.행무시 열우선 2.2개이상은 리스트

===[ predict([[10, 1.4]]) 설명 ]===================================================================================================

result = model.predict([[10, 1.4]]) # predict 앞에 (열, 컬럼, 픽터, 특성)과 형태가 동일해야 한다. 열우선
print('[10, 1.4]의 예측값 : ', result)
# loss :  2.1036248298855753e-08
# [10, 1.4]의 예측값 :  [[20.000286]]
# model이 훈련 받을 때 x가(10, 1.4)인 위치에 y는 20이므로  20에 가까운 수를 예측해줌

====================================================================================================================================
"""

import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

#1. 데이터
x = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [1, 1, 1, 1, 2, 1.3, 1.4, 1.5, 1.6, 1.4]]
             )    # (2,10)


y = np.array([11, 12, 13, 14, 15, 16, 17, 18, 19, 20])  # (10, )

# 계산을 할 때 행렬 연산으로하므로  x, y의 리스트 모양을 같게 해야한다. 

# print(x.shape)  # (2, 10)
# print(y.shape)  # (10, )

x = x.T #  <--와 같음   x = x.transpose()   # 행과 열을 바꾼다 (데이터 순서 행과 열이 변함)
# x = x.reshape(10,2)   # 데이터 순서 유지
print(x)     
print(x.shape)  #(10, 2)


#------- 그냥 알고만 있기---------------------------------------------------
# https://rfriend.tistory.com/289 전차행렬 처리방법 링크 "아래는 3가지 방법 주석"
#  np.dot(a.T, a)
#  np.dot(np.transpose(a), a
#  np.dot(np.swapaxes(a, 0, 1), a)
#-----------------------------------------------------------------------


#2.모델구성
model = Sequential()
model.add(Dense(50, input_dim=2)) # 특성2개 행무시 열우선
model.add(Dense(40, )) 
model.add(Dense(30, )) 
model.add(Dense(40, )) 
model.add(Dense(40, )) 
model.add(Dense(10, ))
model.add(Dense(1, )) 
 
#3. 컴파일, 훈련
model.compile(loss='mse', optimizer='adam')  # optimizer loss에 좀 더 힘을 실어주는 역할
model.fit(x, y, epochs=100, batch_size=3)  # batch_size가 3이므로 데이터 10개를 3, 3, 3, 1로 나눠서 처리


#4.평가,예측
loss = model.evaluate(x, y)
print('loss : ', loss)

result = model.predict([[10, 1.4]]) # predict 앞에 (열, 컬럼, 픽터, 특성)과 형태가 동일해야 한다. 열우선
print('[10, 1.4]의 예측값 : ', result)
# loss :  2.1036248298855753e-08
# [10, 1.4]의 예측값 :  [[20.000286]]
# model이 훈련 받을 때 x가(10, 1.4)인 위치에 y는 20이므로  20에 가까운 수를 예측해줌


